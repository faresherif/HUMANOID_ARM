#include <Wire.h>
#include <RF24.h>
#include <RF24Network.h>
#include <SPI.h>

//#define ENCODER_A_1 2                   //SHOULDER ENCODER PIN A (BASE JOINT) "INTERRUPT"
//#define ENCODER_B_1 20                 //SHOULDER ENCODER PIN B (BASE JOINT)
//#define MOTOR_1_FORWARD  24           //SHOULDER MOTOR (BASE JOINT)
//#define MOTOR_1_BACKWARD 22          //SHOULDER MOTOR (BASE JOINT)
//#define MOTOR_1_ENABLE 9            // MOTOR_1 ENABLE PIN 9
#define ENCODER_A_2 300              //SHOULDER ENCODER PIN A (BASE JOINT) "INTERRUPT"
#define ENCODER_B_2 13            //SHOULDER ENCODER PIN B (BASE JOINT)
#define MOTOR_2_FORWARD  28      //SHOULDER MOTOR (BASE JOINT)
#define MOTOR_2_BACKWARD 30     //SHOULDER MOTOR (BASE JOINT)
#define MOTOR_2_ENABLE 1000      // MOTOR_1 ENABLE PIN 9 
//#define CE 6                  // NRF Chip Enale
//#define CSN 7                //NRF Chip Select Not

#define ENCODER_A_1 2                   //SHOULDER ENCODER PIN A (BASE JOINT) "INTERRUPT"
#define ENCODER_B_1 3                 //SHOULDER ENCODER PIN B (BASE JOINT)
#define MOTOR_1_FORWARD  10           //SHOULDER MOTOR (BASE JOINT)
#define MOTOR_1_BACKWARD 9          //SHOULDER MOTOR (BASE JOINT)
#define MOTOR_1_ENABLE 11     
#define CE  7                  // NRF Chip Enale
#define CSN 8                //NRF Chip Select Not
int pos_1=0, pos_2=0, MOTOR_SPEED_1, motorSpeed_2, dir1,dir2;
float TILT_ANGLE_1, tiltAngle_2;
int deadband1=20;

RF24 NRF(CE,CSN);
RF24Network COMM(NRF);
const byte NODE = 01;

void setup() {
// Initialize serial Communication
Serial.begin(9600);
// Initialize SPI Communication
SPI.begin();
NRF.begin();
COMM.begin(50,NODE);

// Set motor control pins as outputs
Serial.begin(9600);

pinMode(MOTOR_1_FORWARD, OUTPUT);
pinMode(MOTOR_1_BACKWARD, OUTPUT);
pinMode(MOTOR_1_ENABLE, OUTPUT);
pinMode(MOTOR_2_FORWARD, OUTPUT);
pinMode(MOTOR_2_BACKWARD, OUTPUT);
pinMode(MOTOR_2_ENABLE, OUTPUT);
pinMode(ENCODER_A_1,INPUT);
pinMode(ENCODER_B_1,INPUT);
pinMode(ENCODER_A_2,INPUT);
pinMode(ENCODER_B_2,INPUT);
attachInterrupt(digitalPinToInterrupt(ENCODER_A_1),READ_ENCODER_1,RISING);
attachInterrupt(digitalPinToInterrupt(ENCODER_A_2),READ_ENCODER_2,RISING);

}
void setMotor(int dir, int pwmVal, int pwm, int in1, int in2) {
  analogWrite(pwm, pwmVal);
  if (dir == 1) {
    digitalWrite(in1, HIGH);
    digitalWrite(in2, LOW);
  } else if (dir == -1) {
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
  } else {
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
  }
}

void READ_ENCODER_1(){
  int b1 = digitalRead(ENCODER_B_1);
  if(b1 > 0){
    pos_1++;
  }
  else{
    pos_1--;
  }
}

void READ_ENCODER_2(){
  int b2 = digitalRead(ENCODER_B_2);
  if(b2 > 0){
    pos_2++;
  }
  else{
    pos_2--;
  }
}

void loop() {
 // MOTORS RECIEVE FROM MASTER 
  COMM.update();
  while(COMM.available())
  {
    RF24NetworkHeader BOLBOL(NODE);
    COMM.read(BOLBOL,&MOTOR_SPEED_1,sizeof(MOTOR_SPEED_1)); 
   // COMM.read(&motorSpeed_2,sizeof(motorSpeed_2)); 
    COMM.read(BOLBOL,&TILT_ANGLE_1,sizeof(TILT_ANGLE_1));   
    //COMM.read(&tiltAngle_2,sizeof(tiltAngle_2));   
  }

  int pulse_1 = 0;
//  int pulse_2 = 0;
  noInterrupts(); // disable interrupts temporarily while reading
  pulse_1 = pos_1;
  interrupts(); // turn interrupts back on
  delay(100);
/*  noInterrupts(); // disable interrupts temporarily while reading
  pulse_2 = pos_2;
  interrupts(); // turn interrupts back on
  delay(100);
*/
// 514.8 pulse/rev o/p shaft ---> 1.43 pulse/degree o/p shaft
  int motorAngle_1 = pulse_1/1.43;  // Angles in Degree
// int motorAngle_2 = pulse_2/1.43; 
  if(motorAngle_1<0)
    {
      motorAngle_1=0;
    }
// Drive motor 1
    if (abs(pos_1 - motorAngle_1) > deadband1) {
      if (pos_1 < motorAngle_1) {
        dir1 = 1; // If current position is less than target, move forward
      } else if (pos_1 > motorAngle_1) {
        dir1 = -1; // If current position is greater than target, move backward
      }
    } else {
      dir1 = 0; // Stop the motor within the deadband
    }
  setMotor(dir1, 110, MOTOR_2_ENABLE, MOTOR_1_FORWARD, MOTOR_1_BACKWARD);
// Drive motor 2
/*if (motorSpeed_2 > 0 ) 
  {
    do
    {
    digitalWrite(MOTOR_2_FORWARD, HIGH);
    digitalWrite(MOTOR_2_BACKWARD, LOW);
    analogWrite(MOTOR_2_ENABLE, MOTOR_SPEED_1);
    }
    while (motorAngle_2 >= tiltAngle_2);

} 
else 
{
    do
    {
    digitalWrite(MOTOR_1_FORWARD, LOW);
    digitalWrite(MOTOR_1_BACKWARD, HIGH);
    motorSpeed_2 = -motorSpeed_2;
    analogWrite(MOTOR_2_ENABLE, motorSpeed_2);
    }
    while (motorAngle_2 <= tiltAngle_2);

}
*/ 


  delay(100);
}
